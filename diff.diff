diff --git a/car/gps_avoid_manage.py b/car/gps_avoid_manage.py
index d96d1bd..405651a 100644
--- a/car/gps_avoid_manage.py
+++ b/car/gps_avoid_manage.py
@@ -16,6 +16,8 @@ from wp_parts.planner import KiwiPlanner
 from wp_parts.personFinder import PersonFinder
 from wp_parts.mixer import Mixer
 from wp_parts.gpsheading import GPSHeading
+from wp_parts.pidcontroller import PIDController
+from wp_parts.speedometer import Speedometer
 from donkeycar.vehicle import Vehicle
 from donkeycar.parts.actuator import PCA9685, PWMSteering, PWMThrottle
 from donkeycar.parts.controller import LocalWebController
@@ -44,18 +46,19 @@ def drive(cfg, goalLocation):
 
     ctr = LocalWebController()
 
-    speedPID = PIDController(p=0.7, i=0, d=0, f=0.6)
+    speedPID = PIDController(p=0.03, i=0, d=0, f=0.13)
 
     # GPS is a DK part that will poll GPS data from serial port
     # and output current location in radians.
     gps = RTKGPS()
     personFinder = PersonFinder(steer_gain=0.5, distance_calibration=466)
     gpsHeading = GPSHeading(3)
+    gpsSpeed = Speedometer(speedPID)
 
     # Planner is a DK part that calculates control signals to actuators based on current location
     # from GPS
     planner = KiwiPlanner(goalLocation=goalLocation, steer_gain=cfg.STEERING_P_GAIN,
-                        throttle_gain=cfg.THROTTLE_P_GAIN)
+                        throttle_gain=cfg.THROTTLE_P_GAIN, speedPID=speedPID)
 
     # Actuators: steering and throttle
     steering_controller = PCA9685(1, 0x40, busnum=1)
@@ -83,6 +86,7 @@ def drive(cfg, goalLocation):
     # We no longer need the GPS to output previous location
     V.add(gps, outputs=["currLocation", "prevLocation"], threaded=True)
     V.add(gpsHeading, inputs=["currLocation"], outputs=["heading"])
+    V.add(gpsSpeed, inputs=["currLocation"], outputs=["speed"])
 
     # add planner, actuator parts
     # Previous location is no longer needed
diff --git a/car/wp_parts/librtkgps/gps.py b/car/wp_parts/librtkgps/gps.py
index 81d8fe9..7f3b902 100644
--- a/car/wp_parts/librtkgps/gps.py
+++ b/car/wp_parts/librtkgps/gps.py
@@ -27,7 +27,7 @@ def stub():
     nothing = ""
 
 class C099F9P:
-    def __init__(self,port='/dev/ttyACM0', ip="rtk2go.com", rtkport=2101, mountpoint="ESCADERA_NTRIP", callback=stub):
+    def __init__(self,port='/dev/ttyACM1', ip="rtk2go.com", rtkport=2101, mountpoint="ESCADERA_NTRIP", callback=stub):
         self.ser = serial.Serial(port=port, baudrate=460800)
         self.ip = ip
         self.callback = callback
@@ -48,7 +48,7 @@ class C099F9P:
 
     def setUpdateRate(self):
         print(ubx.descriptions.cfg_rate)
-        msg = ubx.Message(ubx.descriptions.cfg_rate.description, {'measRate':51, 'navRate':10, 'timeRef': 0x01})
+        msg = ubx.Message(ubx.descriptions.cfg_rate.description, {'measRate':51, 'navRate':3, 'timeRef': 0x01})
         s = msg.serialize();
         print(":".join("{:02x}".format(c) for c in s))
         self.ser.write(s)
diff --git a/car/wp_parts/personFinder.py b/car/wp_parts/personFinder.py
index d3222f1..4be33fa 100644
--- a/car/wp_parts/personFinder.py
+++ b/car/wp_parts/personFinder.py
@@ -90,7 +90,7 @@ class PersonFinder():
         id = 1
 
         minDist = 3.0
-        self.throttle = 0.2
+        self.throttle = 0.12
         self.steering_cmd = 0
         # draw the final bounding boxes
         for (xA, yA, xB, yB) in pick:
diff --git a/car/wp_parts/pidcontroller.py b/car/wp_parts/pidcontroller.py
index 6a0995d..f60420c 100644
--- a/car/wp_parts/pidcontroller.py
+++ b/car/wp_parts/pidcontroller.py
@@ -9,24 +9,27 @@ class PIDController():
         self.lastData = 0
         self.setting = 0
         self.delta = 0
+        self.dt = 1
 
     def sample(self, data, dt=1):
+        self.dt = dt
         self.acc = self.acc * 0.9
         self.acc = self.acc + data*0.1
         self.delta = data - self.lastData
         self.lastData = data
         self.compute()
 
-    def compute():
+    def compute(self):
+        print("Setting at " + str(self.setting) + " actual " + str(self.lastData))
         fOutput = self.setting * self.f
         pOutput = (self.setting - self.lastData) * self.p
         iOutput = self.acc * self.i
-        dOutput = self.delta * self.d / dt
+        dOutput = self.delta * self.d / self.dt
         self.output = fOutput + pOutput + iOutput + dOutput
 
-    def getOutput():
+    def getOutput(self):
         return self.output
 
-    def set(setting):
+    def set(self, setting):
         self.setting = setting
         self.compute()
diff --git a/car/wp_parts/planner.py b/car/wp_parts/planner.py
index 5a51972..b407efa 100644
--- a/car/wp_parts/planner.py
+++ b/car/wp_parts/planner.py
@@ -72,7 +72,7 @@ class KiwiPlanner():
             self.distance = 100  # reset distance to an arbitrary distance
             if self.currWaypoint < self.numWaypoints:
                 self.lookahead = self.goalLocation[self.currWaypoint - 1]
-                self.find_next_lookahead()
+                self.find_next_lookahead(currLocation)
 
         else:
             # calculate steering and throttle as using controller
@@ -80,7 +80,7 @@ class KiwiPlanner():
             self.steer_cmd = self.steering_controller(currLocation, bearing)
 
             #sets the wanted speed in m/s
-            wantedSpeed = max(0.2, min(1.0, self.distance*/10.0))
+            wantedSpeed = max(0.5, min(1.0, self.distance*1/10.0))
             self.speedPID.set(wantedSpeed)
             steerDoubleGain = min(1, max(2, 5/self.distance))
             self.steer_cmd = self.steer_cmd*steerDoubleGain
@@ -136,7 +136,7 @@ class KiwiPlanner():
 
         return self.steer_cmd
 
-    def find_next_lookahead(slef, currLocation):
+    def find_next_lookahead(self, currLocation):
         distToLookahead = self.dist_between_gps_points(self.lookahead, self.currLocation)
         if self.currWaypoint < 1:
             self.lookahead = self.goalLocation[self.currWaypoint]
@@ -145,8 +145,8 @@ class KiwiPlanner():
         if (distToLookahead > self.lookaheadDistance) and not (self.lookahead == (0,0)) :
             return
 
-        prevWaypoint = self.goalLocation[self.currWaypoint]
-        nextWaypoint = self.goalLocation[self.currWaypoint - 1]
+        prevWaypoint = self.goalLocation[self.currWaypoint - 1]
+        nextWaypoint = self.goalLocation[self.currWaypoint]
         dLat = nextWaypoint[0] - prevWaypoint[0]
         dLon = nextWaypoint[1] - prevWaypoint[1]
         distBetweenWaypoints = self.dist_between_gps_points(prevWaypoint, nextWaypoint)
@@ -231,7 +231,7 @@ class KiwiPlanner():
         """
         #print("Goal wait counter: %d" % self.goalWaitCounter)
         print("Current waypoint: %d" % self.currWaypoint)
-        print(self.goalLocation[self.currWaypoint])
+        print(self.lookahead)
         print(self.reachGoal)
         # print("Current location: [%1.8f, %1.8f]" % (self.currLocation[0], self.currLocation[1]))
         # print("Previous location: [%1.8f, %1.8f]" % (self.prevLocation[0], self.prevLocation[1]))
diff --git a/car/wp_parts/speedometer.py b/car/wp_parts/speedometer.py
index 3dff4e4..de3d07a 100644
--- a/car/wp_parts/speedometer.py
+++ b/car/wp_parts/speedometer.py
@@ -9,9 +9,10 @@ donkeycar part for calculating speed from GPS data
 
 from numpy import pi, cos, sin, arctan2, sqrt, square, radians
 import time
+from datetime import datetime
 
 class Speedometer():
-    def __init__(self, speedPID, positionWindow = 3, updatePeriod=0.05):
+    def __init__(self, speedPID, positionWindow = 3, updatePeriod=0.153):
         self.recentMeasurements = []
         self.prevLocation = (0,0)
         self.previousSpeed = 0
@@ -41,6 +42,7 @@ class Speedometer():
         speed = distance / time
         self.previousSpeed = speed
         self.speedPID.sample(speed)
+        print("######## Speed = " + str(speed) + " " + datetime.now().strftime("%H:%M:%S"))
         return speed
 
     def compute_centroids(self, locations):
